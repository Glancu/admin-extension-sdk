"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[35],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return g}});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=i.createContext({}),c=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return i.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(t),g=a,f=d["".concat(l,".").concat(g)]||d[g]||p[g]||r;return t?i.createElement(f,o(o({ref:n},u),{},{components:t})):i.createElement(f,o({ref:n},u))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<r;c++)o[c]=t[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1457:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var i=t(7462),a=t(3366),r=(t(7294),t(3905)),o=["components"],s={sidebar_position:2},l="Usage",c={unversionedId:"guide/getting-started/usage",id:"guide/getting-started/usage",isDocsHomePage:!1,title:"Usage",description:"After installing the Admin Extension SDK successfully you can use it in your apps and plugins.",source:"@site/docs/guide/1_getting-started/usage.md",sourceDirName:"guide/1_getting-started",slug:"/guide/getting-started/usage",permalink:"/admin-extension-sdk/docs/guide/getting-started/usage",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"Guide",previous:{title:"Installation",permalink:"/admin-extension-sdk/docs/guide/getting-started/installation"},next:{title:"Context",permalink:"/admin-extension-sdk/docs/guide/api-reference/context"}},u=[{value:"Adding functionality to new apps or plugins",id:"adding-functionality-to-new-apps-or-plugins",children:[{value:"NPM example:",id:"npm-example",children:[],level:3},{value:"CDN example:",id:"cdn-example",children:[],level:3}],level:2},{value:"Adding functionality to existing plugins",id:"adding-functionality-to-existing-plugins",children:[{value:"Example:",id:"example",children:[],level:3}],level:2}],p={toc:u};function d(e){var n=e.components,t=(0,a.Z)(e,o);return(0,r.kt)("wrapper",(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"usage"},"Usage"),(0,r.kt)("p",null,"After ",(0,r.kt)("a",{parentName:"p",href:"./installation"},"installing")," the Admin Extension SDK successfully you can use it in your apps and plugins."),(0,r.kt)("h2",{id:"adding-functionality-to-new-apps-or-plugins"},"Adding functionality to new apps or plugins"),(0,r.kt)("p",null,"You can use the SDK features directly in your JS file. Just import the specific feature (NPM method) or use the method in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"sw")," object (CDN method). You can find all features in the API reference documentation."),(0,r.kt)("h3",{id:"npm-example"},"NPM example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// import notification toolkit from the SDK\nimport { notification }  from '@shopware-ag/admin-extension-sdk';\n\n// dispatch a new notification\nnotification.dispatch({\n  title: 'My first notification',\n  message: 'This was really easy to do'\n})\n")),(0,r.kt)("h3",{id:"cdn-example"},"CDN example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// access the \"notification\" toolkit in the global \"sw\" object and dispatch a new notification\nsw.notification.dispatch({\n  title: 'My first notification',\n  message: 'This was really easy to do'\n})\n")),(0,r.kt)("h2",{id:"adding-functionality-to-existing-plugins"},"Adding functionality to existing plugins"),(0,r.kt)("p",null,"Shopware 6 has a rich plugin extension system for the Admin based on Twig and the concepts of component overriding and component extending. These\nconcepts are very powerful, but may also come with a steep learning curve. That's why you can migrate gradually to the new Admin Extension SDK, if you want.\nBoth approaches can work together. This way you can start by converting only parts of your plugins at first and then gradually converting more and more of your plugins as new features are added to the SDK.\nThis approach is also going to help with simplifying your plugins and preparing them for long term usage."),(0,r.kt)("h3",{id:"example"},"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Use existing extension capabilties\nShopware.Component.override('sw-dashboard-index', {\n    methods: {\n        async createdComponent() {\n          // Can also use Admin Extension SDK features\n          await sw.notification.dispatch({\n            title: 'Hello from the plugin',\n            message: 'I am combining the existing approach with the new SDK approach',\n          })\n\n          this.$super('createdComponent');\n        }\n    }\n});\n")))}d.isMDXComponent=!0}}]);